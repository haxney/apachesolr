<?php
// $Id$

/**
 * @file
 * Apache Solr CCK helper hooks implementation.
 */

/**
 * Implementation of hook_apachesolr_cck_fields_alter().
 */
function apachesolr_cck_apachesolr_cck_fields_alter(&$mappings) {
  $mappings['nodereference'] = array(
    'nodereference_select' => array(
      'index_type' => 'integer',
      'default_index' => 'nid',
    ),
    'nodereference_buttons' => array(
      'index_type' => 'integer',
      'default_index' => 'nid',
    ),
    'nodereference_autocomplete' => array(
      'index_type' => 'integer',
      'default_index' => 'nid',
    ),
  );

  $mappings['number_integer'] = array(
    'number' => array(
      'index_type' => 'integer',
    ),
    'optionwidgets_select' => array(
      'index_type' => 'integer',
    ),
    'optionwidgets_buttons' => array(
      'index_type' => 'integer',
    ),
    'optionwidgets_onoff' => array(
      'index_type' => 'integer',
    ),
  );

  $mappings['number_decimal'] = array(
    'number' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_select' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_buttons' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_onoff' => array(
      'index_type' => 'tdouble',
    ),
  );

  $mappings['number_float'] = array(
    'number' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_select' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_buttons' => array(
      'index_type' => 'tdouble',
    ),
    'optionwidgets_onoff' => array(
      'index_type' => 'tdouble',
    ),
  );

  $mappings['text'] = array(
    'optionwidgets_select' => array(
      'index_type' => 'string',
    ),
    'optionwidgets_buttons' => array(
      'index_type' => 'string',
    ),
    'optionwidgets_onoff' => array(
      'index_type' => 'string',
    ),
    'text_textfield' => array(
      'index_type' => 'string',
    ),
    'text_textarea' => array(
      'index_type' => 'text',
    ),
  );

  $mappings['userreference'] = array(
    'userreference_select' => array(
      'index_type' => 'integer',
      'default_index' => 'uid',
    ),
    'userreference_buttons' => array(
      'index_type' => 'integer',
      'default_index' => 'uid',
    ),
    'userreference_autocomplete' => array(
      'index_type' => 'integer',
      'default_index' => 'uid',
    ),
  );

  if(module_exists('email')) {
    $mappings['email'] = array(
      'email_textfield' => array(
        'index_type' => 'string',
        'default_index' => 'email',
      ),
    );
  }

  // TODO: needs multiple-field support.
  if (module_exists('filefield')) {
    $mappings['filefield'] = array(
      'filefield_widget' => array(
        'index_type' => 'string',
        'default_index' => 'filemime',
      ),
      'imagefield_widget' => array(
        'index_type' => 'string',
        'default_index' => 'filemime',
      ),
    );
  }

  // TODO: needs multiple-field support.
  if (module_exists('link')) {
    $mappings['link'] = array(
      'link' => array(
        'index_type' => 'string',
        'default_index' => 'url',
      ),
    );
  }

  if (module_exists('phone')) {
    $mappings['fr_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['it_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['ch_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['ca_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['cr_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['pa_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['uk_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['ru_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['es_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['au_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['cs_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['hu_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['nl_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['il_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['nz_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['br_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['hk_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['mo_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['ph_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['jo_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['eg_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );

    $mappings['int_phone'] = array(
      'phone_textfield' => array(
        'index_type' => 'string',
      ),
    );
  }

  if (module_exists('viewfield')) {
    $mappings['viewfield'] = array(
      'viewfield_select' => array(
        'index_type' => 'string',
        'default_index' => 'vname',
      ),
    );
  }

  if (module_exists('viewreference')) {
    $mappings['viewreference'] = array(
      'viewreference_select' => array(
        'index_type' => 'integer',
        'default_index' => 'view_id',
      ),
      'viewreference_autocomplete' => array(
        'index_type' => 'integer',
        'default_index' => 'view_id',
      ),
    );
  }
}

/**
 * Implementation of hook_apachesolr_prepare_query().
 *
 * Adds the CCK fields to the 'fl' parameter.
 */
function apachesolr_cck_apachesolr_prepare_query(&$query, &$params) {
  foreach (apachesolr_cck_fields() as $field => $info) {
    $params['fl'] .= ','. apachesolr_index_key($info);
  }
}
